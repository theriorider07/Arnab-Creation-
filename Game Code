```dart
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:math';

void main() {
  SystemChrome.setEnabledSystemUIOverlays([]);
  runApp(MaterialApp(
    debugShowCheckedModeBanner: false,
    home: SnakeGame(),
  ));
}

class SnakeGame extends StatefulWidget {
  @override
  _SnakeGameState createState() => _SnakeGameState();
}

class _SnakeGameState extends State<SnakeGame> {
  final int rows = 20;
  final int cols = 20;
  final cellSize = 20.0;

  List<int> snake = [45, 46];
  int food = Random().nextInt(400);
  var direction = 'up';
  bool playing = false;
  
  void startGame() {
    setState(() {
      snake = [45, 46];
      food = Random().nextInt(400);
      direction = 'up';
      playing = true;
    });
  }

  void moveSnake() {
    int newHead;

    if (direction == 'up') {
      newHead = snake.first - 20;
    } else if (direction == 'down') {
      newHead = snake.first + 20;
    } else if (direction == 'left') {
      newHead = snake.first - 1;
    } else if (direction == 'right') {
      newHead = snake.first + 1;
    }

    if (snake.contains(newHead) || newHead < 0 || newHead >= cols * rows) {
      playing = false;
      return;
    }

    snake.insert(0, newHead);
    if (newHead == food) {
      food = Random().nextInt(cols * rows);
    } else {
      snake.removeLast();
    }
  }

  Widget build(BuildContext context) {
    final width = cols * cellSize;
    final height = rows * cellSize;

    return GestureDetector(
      onVerticalDragUpdate: (details) {
        if (direction != 'up' && details.delta.dy > 0) {
          direction = 'down';
        } else if (direction != 'down' && details.delta.dy < 0) {
          direction = 'up';
        }
      },
      onHorizontalDragUpdate: (details) {
        if (direction != 'left' && details.delta.dx > 0) {
          direction = 'right';
        } else if (direction != 'right' && details.delta.dx < 0) {
          direction = 'left';
        }
      },
      child: Scaffold(
        body: Container(
          color: Colors.black,
          width: width,
          height: height,
          child: playing
              ? GridView.builder(
                  physics: NeverScrollableScrollPhysics(),
                  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                      crossAxisCount: cols),
                  itemCount: cols * rows,
                  itemBuilder: (context, index) {
                    if (snake.contains(index)) {
                      return Container(
                        color: Colors.green,
                      );
                    } else if (index == food) {
                      return Container(
                        color: Colors.red,
                      );
                    } else {
                      return Container(
                        color: Colors.black,
                      );
                    }
                  },
                )
              : Center(
                  child: RaisedButton(
                    child: Text('Start Game'),
                    onPressed: startGame,
                  ),
                ),
        ),
      ),
    );
  }

  void update() {
    if (playing) {
      moveSnake();
    }
    Future.delayed(Duration(milliseconds: 200), update);
  }

  @override
  void initState() {
    super.initState();
    update();
  }
}
```